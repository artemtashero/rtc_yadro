// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module rtc_am (
        input wire clk,
        input wire arst_n,
        
        input  logic        PENABLE,
        input  logic        PSEL,
        input  logic        PWRITE,
        input  logic [31:0] PADDR,
        input  logic [31:0] PWDATA,
        output logic        PSLVERR,
        output logic        PREADY,
        output logic [31:0] PRDATA,

        input rtc_am_pkg::rtc_am__in_t hwif_in,
        output rtc_am_pkg::rtc_am__out_t hwif_out
    );

    localparam RST_ACTIVE_LEVEL = 0;

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [31:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
        end else begin
            if(~is_active) begin
                if(PSEL && PENABLE) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= PWRITE;
                    cpuif_addr <= {PADDR[31:2], 2'b0};
                    cpuif_wr_data <= PWDATA;
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end
    assign cpuif_wr_biten = '1;

    // Response
    assign PREADY = cpuif_rd_ack | cpuif_wr_ack | ~(arst_n ^ RST_ACTIVE_LEVEL);
    assign PRDATA = cpuif_rd_data;
    assign PSLVERR = cpuif_rd_err | cpuif_wr_err | ~(arst_n ^ RST_ACTIVE_LEVEL);

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic enable_reg;
        logic config_reg;
        logic cur_sec_reg;
        logic cur_min_reg;
        logic cur_hours_reg;
        logic cur_day_of_week_reg;
        logic cur_day_of_month_reg;
        logic cur_month_reg;
        logic cur_year_reg;
        logic const_reg;
        logic init_sec_reg;
        logic init_min_reg;
        logic init_hours_reg;
        logic init_day_of_week_reg;
        logic init_day_of_month_reg;
        logic init_month_reg;
        logic init_year_reg;
        logic ir_in_sec_reg;
        logic ir_in_min_reg;
        logic ir_in_hours_reg;
        logic ir_in_day_of_week_reg;
        logic ir_in_day_of_month_reg;
        logic ir_in_month_reg;
        logic ir_in_year_reg;
        logic ir_out_sec_reg;
        logic ir_out_min_reg;
        logic ir_out_hours_reg;
        logic ir_out_day_of_week_reg;
        logic ir_out_day_of_month_reg;
        logic ir_out_month_reg;
        logic ir_out_year_reg;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic undecoded_addr_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_decoded;
        is_decoded = '0;
        decoded_reg_strb.enable_reg = cpuif_req_masked & (cpuif_addr == 32'h0);
        is_decoded |= decoded_reg_strb.enable_reg;
        decoded_reg_strb.config_reg = cpuif_req_masked & (cpuif_addr == 32'h4);
        is_decoded |= decoded_reg_strb.config_reg;
        decoded_reg_strb.cur_sec_reg = cpuif_req_masked & (cpuif_addr == 32'h8);
        is_decoded |= decoded_reg_strb.cur_sec_reg;
        decoded_reg_strb.cur_min_reg = cpuif_req_masked & (cpuif_addr == 32'hc);
        is_decoded |= decoded_reg_strb.cur_min_reg;
        decoded_reg_strb.cur_hours_reg = cpuif_req_masked & (cpuif_addr == 32'h10);
        is_decoded |= decoded_reg_strb.cur_hours_reg;
        decoded_reg_strb.cur_day_of_week_reg = cpuif_req_masked & (cpuif_addr == 32'h14);
        is_decoded |= decoded_reg_strb.cur_day_of_week_reg;
        decoded_reg_strb.cur_day_of_month_reg = cpuif_req_masked & (cpuif_addr == 32'h18);
        is_decoded |= decoded_reg_strb.cur_day_of_month_reg;
        decoded_reg_strb.cur_month_reg = cpuif_req_masked & (cpuif_addr == 32'h1c);
        is_decoded |= decoded_reg_strb.cur_month_reg;
        decoded_reg_strb.cur_year_reg = cpuif_req_masked & (cpuif_addr == 32'h20);
        is_decoded |= decoded_reg_strb.cur_year_reg;
        decoded_reg_strb.const_reg = cpuif_req_masked & (cpuif_addr == 32'h24);
        is_decoded |= decoded_reg_strb.const_reg;
        decoded_reg_strb.init_sec_reg = cpuif_req_masked & (cpuif_addr == 32'h28);
        is_decoded |= decoded_reg_strb.init_sec_reg;
        decoded_reg_strb.init_min_reg = cpuif_req_masked & (cpuif_addr == 32'h2c);
        is_decoded |= decoded_reg_strb.init_min_reg;
        decoded_reg_strb.init_hours_reg = cpuif_req_masked & (cpuif_addr == 32'h30);
        is_decoded |= decoded_reg_strb.init_hours_reg;
        decoded_reg_strb.init_day_of_week_reg = cpuif_req_masked & (cpuif_addr == 32'h34);
        is_decoded |= decoded_reg_strb.init_day_of_week_reg;
        decoded_reg_strb.init_day_of_month_reg = cpuif_req_masked & (cpuif_addr == 32'h38);
        is_decoded |= decoded_reg_strb.init_day_of_month_reg;
        decoded_reg_strb.init_month_reg = cpuif_req_masked & (cpuif_addr == 32'h3c);
        is_decoded |= decoded_reg_strb.init_month_reg;
        decoded_reg_strb.init_year_reg = cpuif_req_masked & (cpuif_addr == 32'h40);
        is_decoded |= decoded_reg_strb.init_year_reg;
        decoded_reg_strb.ir_in_sec_reg = cpuif_req_masked & (cpuif_addr == 32'h44);
        is_decoded |= decoded_reg_strb.ir_in_sec_reg;
        decoded_reg_strb.ir_in_min_reg = cpuif_req_masked & (cpuif_addr == 32'h48);
        is_decoded |= decoded_reg_strb.ir_in_min_reg;
        decoded_reg_strb.ir_in_hours_reg = cpuif_req_masked & (cpuif_addr == 32'h4c);
        is_decoded |= decoded_reg_strb.ir_in_hours_reg;
        decoded_reg_strb.ir_in_day_of_week_reg = cpuif_req_masked & (cpuif_addr == 32'h50);
        is_decoded |= decoded_reg_strb.ir_in_day_of_week_reg;
        decoded_reg_strb.ir_in_day_of_month_reg = cpuif_req_masked & (cpuif_addr == 32'h54);
        is_decoded |= decoded_reg_strb.ir_in_day_of_month_reg;
        decoded_reg_strb.ir_in_month_reg = cpuif_req_masked & (cpuif_addr == 32'h58);
        is_decoded |= decoded_reg_strb.ir_in_month_reg;
        decoded_reg_strb.ir_in_year_reg = cpuif_req_masked & (cpuif_addr == 32'h5c);
        is_decoded |= decoded_reg_strb.ir_in_year_reg;
        decoded_reg_strb.ir_out_sec_reg = cpuif_req_masked & (cpuif_addr == 32'h60);
        is_decoded |= decoded_reg_strb.ir_out_sec_reg;
        decoded_reg_strb.ir_out_min_reg = cpuif_req_masked & (cpuif_addr == 32'h64);
        is_decoded |= decoded_reg_strb.ir_out_min_reg;
        decoded_reg_strb.ir_out_hours_reg = cpuif_req_masked & (cpuif_addr == 32'h68);
        is_decoded |= decoded_reg_strb.ir_out_hours_reg;
        decoded_reg_strb.ir_out_day_of_week_reg = cpuif_req_masked & (cpuif_addr == 32'h6c);
        is_decoded |= decoded_reg_strb.ir_out_day_of_week_reg;
        decoded_reg_strb.ir_out_day_of_month_reg = cpuif_req_masked & (cpuif_addr == 32'h70);
        is_decoded |= decoded_reg_strb.ir_out_day_of_month_reg;
        decoded_reg_strb.ir_out_month_reg = cpuif_req_masked & (cpuif_addr == 32'h74);
        is_decoded |= decoded_reg_strb.ir_out_month_reg;
        decoded_reg_strb.ir_out_year_reg = cpuif_req_masked & (cpuif_addr == 32'h78);
        is_decoded |= decoded_reg_strb.ir_out_year_reg;
        undecoded_addr_strb = ~is_decoded & decoded_req;
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic next;
                logic load_next;
            } enable;
        } enable_reg;
        struct {
            struct {
                logic next;
                logic load_next;
            } gen_en;
            struct {
                logic next;
                logic load_next;
            } sel_clk;
            struct {
                logic next;
                logic load_next;
            } sel_mode;
            struct {
                logic next;
                logic load_next;
            } en_preset;
        } config_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } sec;
        } cur_sec_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } min;
        } cur_min_reg;
        struct {
            struct {
                logic [4:0] next;
                logic load_next;
            } hour;
            struct {
                logic next;
                logic load_next;
            } mode_12_24;
            struct {
                logic next;
                logic load_next;
            } mode_AM_PM;
        } cur_hours_reg;
        struct {
            struct {
                logic [2:0] next;
                logic load_next;
            } day_of_week;
        } cur_day_of_week_reg;
        struct {
            struct {
                logic [4:0] next;
                logic load_next;
            } day_of_month;
        } cur_day_of_month_reg;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } month;
        } cur_month_reg;
        struct {
            struct {
                logic [11:0] next;
                logic load_next;
            } year;
        } cur_year_reg;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } const_;
        } const_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } sec;
        } init_sec_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } min;
        } init_min_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } hour;
            struct {
                logic next;
                logic load_next;
            } mode_12_24;
            struct {
                logic next;
                logic load_next;
            } mode_AM_PM;
        } init_hours_reg;
        struct {
            struct {
                logic [2:0] next;
                logic load_next;
            } day_of_week;
        } init_day_of_week_reg;
        struct {
            struct {
                logic [4:0] next;
                logic load_next;
            } day_of_month;
        } init_day_of_month_reg;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } month;
        } init_month_reg;
        struct {
            struct {
                logic [11:0] next;
                logic load_next;
            } year;
        } init_year_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } sec;
        } ir_in_sec_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } min;
        } ir_in_min_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } hour;
            struct {
                logic next;
                logic load_next;
            } mode_12_24;
            struct {
                logic next;
                logic load_next;
            } mode_AM_PM;
        } ir_in_hours_reg;
        struct {
            struct {
                logic [2:0] next;
                logic load_next;
            } day_of_week;
        } ir_in_day_of_week_reg;
        struct {
            struct {
                logic [4:0] next;
                logic load_next;
            } day_of_month;
        } ir_in_day_of_month_reg;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } month;
        } ir_in_month_reg;
        struct {
            struct {
                logic [11:0] next;
                logic load_next;
            } year;
        } ir_in_year_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } sec;
        } ir_out_sec_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } min;
        } ir_out_min_reg;
        struct {
            struct {
                logic [5:0] next;
                logic load_next;
            } hour;
            struct {
                logic next;
                logic load_next;
            } mode_12_24;
            struct {
                logic next;
                logic load_next;
            } mode_AM_PM;
        } ir_out_hours_reg;
        struct {
            struct {
                logic [2:0] next;
                logic load_next;
            } day_of_week;
        } ir_out_day_of_week_reg;
        struct {
            struct {
                logic [4:0] next;
                logic load_next;
            } day_of_month;
        } ir_out_day_of_month_reg;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } month;
        } ir_out_month_reg;
        struct {
            struct {
                logic [11:0] next;
                logic load_next;
            } year;
        } ir_out_year_reg;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic value;
            } enable;
        } enable_reg;
        struct {
            struct {
                logic value;
            } gen_en;
            struct {
                logic value;
            } sel_clk;
            struct {
                logic value;
            } sel_mode;
            struct {
                logic value;
            } en_preset;
        } config_reg;
        struct {
            struct {
                logic [5:0] value;
            } sec;
        } cur_sec_reg;
        struct {
            struct {
                logic [5:0] value;
            } min;
        } cur_min_reg;
        struct {
            struct {
                logic [4:0] value;
            } hour;
            struct {
                logic value;
            } mode_12_24;
            struct {
                logic value;
            } mode_AM_PM;
        } cur_hours_reg;
        struct {
            struct {
                logic [2:0] value;
            } day_of_week;
        } cur_day_of_week_reg;
        struct {
            struct {
                logic [4:0] value;
            } day_of_month;
        } cur_day_of_month_reg;
        struct {
            struct {
                logic [3:0] value;
            } month;
        } cur_month_reg;
        struct {
            struct {
                logic [11:0] value;
            } year;
        } cur_year_reg;
        struct {
            struct {
                logic [31:0] value;
            } const_;
        } const_reg;
        struct {
            struct {
                logic [5:0] value;
            } sec;
        } init_sec_reg;
        struct {
            struct {
                logic [5:0] value;
            } min;
        } init_min_reg;
        struct {
            struct {
                logic [5:0] value;
            } hour;
            struct {
                logic value;
            } mode_12_24;
            struct {
                logic value;
            } mode_AM_PM;
        } init_hours_reg;
        struct {
            struct {
                logic [2:0] value;
            } day_of_week;
        } init_day_of_week_reg;
        struct {
            struct {
                logic [4:0] value;
            } day_of_month;
        } init_day_of_month_reg;
        struct {
            struct {
                logic [3:0] value;
            } month;
        } init_month_reg;
        struct {
            struct {
                logic [11:0] value;
            } year;
        } init_year_reg;
        struct {
            struct {
                logic [5:0] value;
            } sec;
        } ir_in_sec_reg;
        struct {
            struct {
                logic [5:0] value;
            } min;
        } ir_in_min_reg;
        struct {
            struct {
                logic [5:0] value;
            } hour;
            struct {
                logic value;
            } mode_12_24;
            struct {
                logic value;
            } mode_AM_PM;
        } ir_in_hours_reg;
        struct {
            struct {
                logic [2:0] value;
            } day_of_week;
        } ir_in_day_of_week_reg;
        struct {
            struct {
                logic [4:0] value;
            } day_of_month;
        } ir_in_day_of_month_reg;
        struct {
            struct {
                logic [3:0] value;
            } month;
        } ir_in_month_reg;
        struct {
            struct {
                logic [11:0] value;
            } year;
        } ir_in_year_reg;
        struct {
            struct {
                logic [5:0] value;
            } sec;
        } ir_out_sec_reg;
        struct {
            struct {
                logic [5:0] value;
            } min;
        } ir_out_min_reg;
        struct {
            struct {
                logic [5:0] value;
            } hour;
            struct {
                logic value;
            } mode_12_24;
            struct {
                logic value;
            } mode_AM_PM;
        } ir_out_hours_reg;
        struct {
            struct {
                logic [2:0] value;
            } day_of_week;
        } ir_out_day_of_week_reg;
        struct {
            struct {
                logic [4:0] value;
            } day_of_month;
        } ir_out_day_of_month_reg;
        struct {
            struct {
                logic [3:0] value;
            } month;
        } ir_out_month_reg;
        struct {
            struct {
                logic [11:0] value;
            } year;
        } ir_out_year_reg;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: rtc_am.enable_reg.enable
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.enable_reg.enable.value;
        load_next_c = '0;
        if(decoded_reg_strb.enable_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.enable_reg.enable.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.enable_reg.enable.next = next_c;
        field_combo.enable_reg.enable.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.enable_reg.enable.load_next) begin
            field_storage.enable_reg.enable.value <= field_combo.enable_reg.enable.next;
        end
    end
    assign hwif_out.enable_reg.enable.value = field_storage.enable_reg.enable.value;
    // Field: rtc_am.config_reg.gen_en
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.config_reg.gen_en.value;
        load_next_c = '0;
        if(decoded_reg_strb.config_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.config_reg.gen_en.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.config_reg.gen_en.next = next_c;
        field_combo.config_reg.gen_en.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.config_reg.gen_en.value <= 1'h1;
        end else if(field_combo.config_reg.gen_en.load_next) begin
            field_storage.config_reg.gen_en.value <= field_combo.config_reg.gen_en.next;
        end
    end
    assign hwif_out.config_reg.gen_en.value = field_storage.config_reg.gen_en.value;
    // Field: rtc_am.config_reg.sel_clk
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.config_reg.sel_clk.value;
        load_next_c = '0;
        if(decoded_reg_strb.config_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.config_reg.sel_clk.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.config_reg.sel_clk.next = next_c;
        field_combo.config_reg.sel_clk.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.config_reg.sel_clk.value <= 1'h0;
        end else if(field_combo.config_reg.sel_clk.load_next) begin
            field_storage.config_reg.sel_clk.value <= field_combo.config_reg.sel_clk.next;
        end
    end
    assign hwif_out.config_reg.sel_clk.value = field_storage.config_reg.sel_clk.value;
    // Field: rtc_am.config_reg.sel_mode
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.config_reg.sel_mode.value;
        load_next_c = '0;
        if(decoded_reg_strb.config_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.config_reg.sel_mode.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.config_reg.sel_mode.next = next_c;
        field_combo.config_reg.sel_mode.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.config_reg.sel_mode.value <= 1'h0;
        end else if(field_combo.config_reg.sel_mode.load_next) begin
            field_storage.config_reg.sel_mode.value <= field_combo.config_reg.sel_mode.next;
        end
    end
    assign hwif_out.config_reg.sel_mode.value = field_storage.config_reg.sel_mode.value;
    // Field: rtc_am.config_reg.en_preset
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.config_reg.en_preset.value;
        load_next_c = '0;
        if(decoded_reg_strb.config_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.config_reg.en_preset.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.config_reg.en_preset.next = next_c;
        field_combo.config_reg.en_preset.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.config_reg.en_preset.value <= 1'h0;
        end else if(field_combo.config_reg.en_preset.load_next) begin
            field_storage.config_reg.en_preset.value <= field_combo.config_reg.en_preset.next;
        end
    end
    assign hwif_out.config_reg.en_preset.value = field_storage.config_reg.en_preset.value;
    // Field: rtc_am.cur_sec_reg.sec
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.cur_sec_reg.sec.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.cur_sec_reg.sec.next;
        load_next_c = '1;
        field_combo.cur_sec_reg.sec.next = next_c;
        field_combo.cur_sec_reg.sec.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.cur_sec_reg.sec.value <= 6'h0;
        end else if(field_combo.cur_sec_reg.sec.load_next) begin
            field_storage.cur_sec_reg.sec.value <= field_combo.cur_sec_reg.sec.next;
        end
    end
    assign hwif_out.cur_sec_reg.sec.value = field_storage.cur_sec_reg.sec.value;
    // Field: rtc_am.cur_min_reg.min
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.cur_min_reg.min.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.cur_min_reg.min.next;
        load_next_c = '1;
        field_combo.cur_min_reg.min.next = next_c;
        field_combo.cur_min_reg.min.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.cur_min_reg.min.value <= 6'h0;
        end else if(field_combo.cur_min_reg.min.load_next) begin
            field_storage.cur_min_reg.min.value <= field_combo.cur_min_reg.min.next;
        end
    end
    assign hwif_out.cur_min_reg.min.value = field_storage.cur_min_reg.min.value;
    // Field: rtc_am.cur_hours_reg.hour
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.cur_hours_reg.hour.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.cur_hours_reg.hour.next;
        load_next_c = '1;
        field_combo.cur_hours_reg.hour.next = next_c;
        field_combo.cur_hours_reg.hour.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.cur_hours_reg.hour.value <= 5'h0;
        end else if(field_combo.cur_hours_reg.hour.load_next) begin
            field_storage.cur_hours_reg.hour.value <= field_combo.cur_hours_reg.hour.next;
        end
    end
    assign hwif_out.cur_hours_reg.hour.value = field_storage.cur_hours_reg.hour.value;
    // Field: rtc_am.cur_hours_reg.mode_12_24
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.cur_hours_reg.mode_12_24.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.cur_hours_reg.mode_12_24.next;
        load_next_c = '1;
        field_combo.cur_hours_reg.mode_12_24.next = next_c;
        field_combo.cur_hours_reg.mode_12_24.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.cur_hours_reg.mode_12_24.value <= 1'h0;
        end else if(field_combo.cur_hours_reg.mode_12_24.load_next) begin
            field_storage.cur_hours_reg.mode_12_24.value <= field_combo.cur_hours_reg.mode_12_24.next;
        end
    end
    assign hwif_out.cur_hours_reg.mode_12_24.value = field_storage.cur_hours_reg.mode_12_24.value;
    // Field: rtc_am.cur_hours_reg.mode_AM_PM
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.cur_hours_reg.mode_AM_PM.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.cur_hours_reg.mode_AM_PM.next;
        load_next_c = '1;
        field_combo.cur_hours_reg.mode_AM_PM.next = next_c;
        field_combo.cur_hours_reg.mode_AM_PM.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.cur_hours_reg.mode_AM_PM.value <= 1'h0;
        end else if(field_combo.cur_hours_reg.mode_AM_PM.load_next) begin
            field_storage.cur_hours_reg.mode_AM_PM.value <= field_combo.cur_hours_reg.mode_AM_PM.next;
        end
    end
    assign hwif_out.cur_hours_reg.mode_AM_PM.value = field_storage.cur_hours_reg.mode_AM_PM.value;
    // Field: rtc_am.cur_day_of_week_reg.day_of_week
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.cur_day_of_week_reg.day_of_week.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.cur_day_of_week_reg.day_of_week.next;
        load_next_c = '1;
        field_combo.cur_day_of_week_reg.day_of_week.next = next_c;
        field_combo.cur_day_of_week_reg.day_of_week.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.cur_day_of_week_reg.day_of_week.value <= 3'h1;
        end else if(field_combo.cur_day_of_week_reg.day_of_week.load_next) begin
            field_storage.cur_day_of_week_reg.day_of_week.value <= field_combo.cur_day_of_week_reg.day_of_week.next;
        end
    end
    assign hwif_out.cur_day_of_week_reg.day_of_week.value = field_storage.cur_day_of_week_reg.day_of_week.value;
    // Field: rtc_am.cur_day_of_month_reg.day_of_month
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.cur_day_of_month_reg.day_of_month.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.cur_day_of_month_reg.day_of_month.next;
        load_next_c = '1;
        field_combo.cur_day_of_month_reg.day_of_month.next = next_c;
        field_combo.cur_day_of_month_reg.day_of_month.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.cur_day_of_month_reg.day_of_month.value <= 5'h1;
        end else if(field_combo.cur_day_of_month_reg.day_of_month.load_next) begin
            field_storage.cur_day_of_month_reg.day_of_month.value <= field_combo.cur_day_of_month_reg.day_of_month.next;
        end
    end
    assign hwif_out.cur_day_of_month_reg.day_of_month.value = field_storage.cur_day_of_month_reg.day_of_month.value;
    // Field: rtc_am.cur_month_reg.month
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.cur_month_reg.month.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.cur_month_reg.month.next;
        load_next_c = '1;
        field_combo.cur_month_reg.month.next = next_c;
        field_combo.cur_month_reg.month.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.cur_month_reg.month.value <= 4'h1;
        end else if(field_combo.cur_month_reg.month.load_next) begin
            field_storage.cur_month_reg.month.value <= field_combo.cur_month_reg.month.next;
        end
    end
    assign hwif_out.cur_month_reg.month.value = field_storage.cur_month_reg.month.value;
    // Field: rtc_am.cur_year_reg.year
    always_comb begin
        automatic logic [11:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.cur_year_reg.year.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.cur_year_reg.year.next;
        load_next_c = '1;
        field_combo.cur_year_reg.year.next = next_c;
        field_combo.cur_year_reg.year.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.cur_year_reg.year.value <= 12'h7d0;
        end else if(field_combo.cur_year_reg.year.load_next) begin
            field_storage.cur_year_reg.year.value <= field_combo.cur_year_reg.year.next;
        end
    end
    assign hwif_out.cur_year_reg.year.value = field_storage.cur_year_reg.year.value;
    // Field: rtc_am.const_reg.const
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.const_reg.const_.value;
        load_next_c = '0;
        if(decoded_reg_strb.const_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.const_reg.const_.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.const_reg.const_.next = next_c;
        field_combo.const_reg.const_.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.const_reg.const_.value <= 32'h0;
        end else if(field_combo.const_reg.const_.load_next) begin
            field_storage.const_reg.const_.value <= field_combo.const_reg.const_.next;
        end
    end
    assign hwif_out.const_reg.const_.value = field_storage.const_reg.const_.value;
    // Field: rtc_am.init_sec_reg.sec
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.init_sec_reg.sec.value;
        load_next_c = '0;
        if(decoded_reg_strb.init_sec_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.init_sec_reg.sec.value & ~decoded_wr_biten[5:0]) | (decoded_wr_data[5:0] & decoded_wr_biten[5:0]);
            load_next_c = '1;
        end
        field_combo.init_sec_reg.sec.next = next_c;
        field_combo.init_sec_reg.sec.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.init_sec_reg.sec.value <= 6'h0;
        end else if(field_combo.init_sec_reg.sec.load_next) begin
            field_storage.init_sec_reg.sec.value <= field_combo.init_sec_reg.sec.next;
        end
    end
    assign hwif_out.init_sec_reg.sec.value = field_storage.init_sec_reg.sec.value;
    // Field: rtc_am.init_min_reg.min
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.init_min_reg.min.value;
        load_next_c = '0;
        if(decoded_reg_strb.init_min_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.init_min_reg.min.value & ~decoded_wr_biten[5:0]) | (decoded_wr_data[5:0] & decoded_wr_biten[5:0]);
            load_next_c = '1;
        end
        field_combo.init_min_reg.min.next = next_c;
        field_combo.init_min_reg.min.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.init_min_reg.min.value <= 6'h0;
        end else if(field_combo.init_min_reg.min.load_next) begin
            field_storage.init_min_reg.min.value <= field_combo.init_min_reg.min.next;
        end
    end
    assign hwif_out.init_min_reg.min.value = field_storage.init_min_reg.min.value;
    // Field: rtc_am.init_hours_reg.hour
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.init_hours_reg.hour.value;
        load_next_c = '0;
        if(decoded_reg_strb.init_hours_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.init_hours_reg.hour.value & ~decoded_wr_biten[5:0]) | (decoded_wr_data[5:0] & decoded_wr_biten[5:0]);
            load_next_c = '1;
        end
        field_combo.init_hours_reg.hour.next = next_c;
        field_combo.init_hours_reg.hour.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.init_hours_reg.hour.value <= 6'h0;
        end else if(field_combo.init_hours_reg.hour.load_next) begin
            field_storage.init_hours_reg.hour.value <= field_combo.init_hours_reg.hour.next;
        end
    end
    assign hwif_out.init_hours_reg.hour.value = field_storage.init_hours_reg.hour.value;
    // Field: rtc_am.init_hours_reg.mode_12_24
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.init_hours_reg.mode_12_24.value;
        load_next_c = '0;
        if(decoded_reg_strb.init_hours_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.init_hours_reg.mode_12_24.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.init_hours_reg.mode_12_24.next = next_c;
        field_combo.init_hours_reg.mode_12_24.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.init_hours_reg.mode_12_24.value <= 1'h0;
        end else if(field_combo.init_hours_reg.mode_12_24.load_next) begin
            field_storage.init_hours_reg.mode_12_24.value <= field_combo.init_hours_reg.mode_12_24.next;
        end
    end
    assign hwif_out.init_hours_reg.mode_12_24.value = field_storage.init_hours_reg.mode_12_24.value;
    // Field: rtc_am.init_hours_reg.mode_AM_PM
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.init_hours_reg.mode_AM_PM.value;
        load_next_c = '0;
        if(decoded_reg_strb.init_hours_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.init_hours_reg.mode_AM_PM.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.init_hours_reg.mode_AM_PM.next = next_c;
        field_combo.init_hours_reg.mode_AM_PM.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.init_hours_reg.mode_AM_PM.value <= 1'h0;
        end else if(field_combo.init_hours_reg.mode_AM_PM.load_next) begin
            field_storage.init_hours_reg.mode_AM_PM.value <= field_combo.init_hours_reg.mode_AM_PM.next;
        end
    end
    assign hwif_out.init_hours_reg.mode_AM_PM.value = field_storage.init_hours_reg.mode_AM_PM.value;
    // Field: rtc_am.init_day_of_week_reg.day_of_week
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.init_day_of_week_reg.day_of_week.value;
        load_next_c = '0;
        if(decoded_reg_strb.init_day_of_week_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.init_day_of_week_reg.day_of_week.value & ~decoded_wr_biten[2:0]) | (decoded_wr_data[2:0] & decoded_wr_biten[2:0]);
            load_next_c = '1;
        end
        field_combo.init_day_of_week_reg.day_of_week.next = next_c;
        field_combo.init_day_of_week_reg.day_of_week.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.init_day_of_week_reg.day_of_week.value <= 3'h1;
        end else if(field_combo.init_day_of_week_reg.day_of_week.load_next) begin
            field_storage.init_day_of_week_reg.day_of_week.value <= field_combo.init_day_of_week_reg.day_of_week.next;
        end
    end
    assign hwif_out.init_day_of_week_reg.day_of_week.value = field_storage.init_day_of_week_reg.day_of_week.value;
    // Field: rtc_am.init_day_of_month_reg.day_of_month
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.init_day_of_month_reg.day_of_month.value;
        load_next_c = '0;
        if(decoded_reg_strb.init_day_of_month_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.init_day_of_month_reg.day_of_month.value & ~decoded_wr_biten[4:0]) | (decoded_wr_data[4:0] & decoded_wr_biten[4:0]);
            load_next_c = '1;
        end
        field_combo.init_day_of_month_reg.day_of_month.next = next_c;
        field_combo.init_day_of_month_reg.day_of_month.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.init_day_of_month_reg.day_of_month.value <= 5'h1;
        end else if(field_combo.init_day_of_month_reg.day_of_month.load_next) begin
            field_storage.init_day_of_month_reg.day_of_month.value <= field_combo.init_day_of_month_reg.day_of_month.next;
        end
    end
    assign hwif_out.init_day_of_month_reg.day_of_month.value = field_storage.init_day_of_month_reg.day_of_month.value;
    // Field: rtc_am.init_month_reg.month
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.init_month_reg.month.value;
        load_next_c = '0;
        if(decoded_reg_strb.init_month_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.init_month_reg.month.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo.init_month_reg.month.next = next_c;
        field_combo.init_month_reg.month.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.init_month_reg.month.value <= 4'h1;
        end else if(field_combo.init_month_reg.month.load_next) begin
            field_storage.init_month_reg.month.value <= field_combo.init_month_reg.month.next;
        end
    end
    assign hwif_out.init_month_reg.month.value = field_storage.init_month_reg.month.value;
    // Field: rtc_am.init_year_reg.year
    always_comb begin
        automatic logic [11:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.init_year_reg.year.value;
        load_next_c = '0;
        if(decoded_reg_strb.init_year_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.init_year_reg.year.value & ~decoded_wr_biten[11:0]) | (decoded_wr_data[11:0] & decoded_wr_biten[11:0]);
            load_next_c = '1;
        end
        field_combo.init_year_reg.year.next = next_c;
        field_combo.init_year_reg.year.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.init_year_reg.year.value <= 12'h7d0;
        end else if(field_combo.init_year_reg.year.load_next) begin
            field_storage.init_year_reg.year.value <= field_combo.init_year_reg.year.next;
        end
    end
    assign hwif_out.init_year_reg.year.value = field_storage.init_year_reg.year.value;
    // Field: rtc_am.ir_in_sec_reg.sec
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_in_sec_reg.sec.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.ir_in_sec_reg.sec.next;
        load_next_c = '1;
        field_combo.ir_in_sec_reg.sec.next = next_c;
        field_combo.ir_in_sec_reg.sec.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_in_sec_reg.sec.value <= 6'h0;
        end else if(field_combo.ir_in_sec_reg.sec.load_next) begin
            field_storage.ir_in_sec_reg.sec.value <= field_combo.ir_in_sec_reg.sec.next;
        end
    end
    assign hwif_out.ir_in_sec_reg.sec.value = field_storage.ir_in_sec_reg.sec.value;
    // Field: rtc_am.ir_in_min_reg.min
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_in_min_reg.min.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.ir_in_min_reg.min.next;
        load_next_c = '1;
        field_combo.ir_in_min_reg.min.next = next_c;
        field_combo.ir_in_min_reg.min.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_in_min_reg.min.value <= 6'h0;
        end else if(field_combo.ir_in_min_reg.min.load_next) begin
            field_storage.ir_in_min_reg.min.value <= field_combo.ir_in_min_reg.min.next;
        end
    end
    assign hwif_out.ir_in_min_reg.min.value = field_storage.ir_in_min_reg.min.value;
    // Field: rtc_am.ir_in_hours_reg.hour
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_in_hours_reg.hour.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.ir_in_hours_reg.hour.next;
        load_next_c = '1;
        field_combo.ir_in_hours_reg.hour.next = next_c;
        field_combo.ir_in_hours_reg.hour.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_in_hours_reg.hour.value <= 6'h0;
        end else if(field_combo.ir_in_hours_reg.hour.load_next) begin
            field_storage.ir_in_hours_reg.hour.value <= field_combo.ir_in_hours_reg.hour.next;
        end
    end
    assign hwif_out.ir_in_hours_reg.hour.value = field_storage.ir_in_hours_reg.hour.value;
    // Field: rtc_am.ir_in_hours_reg.mode_12_24
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_in_hours_reg.mode_12_24.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.ir_in_hours_reg.mode_12_24.next;
        load_next_c = '1;
        field_combo.ir_in_hours_reg.mode_12_24.next = next_c;
        field_combo.ir_in_hours_reg.mode_12_24.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_in_hours_reg.mode_12_24.value <= 1'h0;
        end else if(field_combo.ir_in_hours_reg.mode_12_24.load_next) begin
            field_storage.ir_in_hours_reg.mode_12_24.value <= field_combo.ir_in_hours_reg.mode_12_24.next;
        end
    end
    assign hwif_out.ir_in_hours_reg.mode_12_24.value = field_storage.ir_in_hours_reg.mode_12_24.value;
    // Field: rtc_am.ir_in_hours_reg.mode_AM_PM
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_in_hours_reg.mode_AM_PM.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.ir_in_hours_reg.mode_AM_PM.next;
        load_next_c = '1;
        field_combo.ir_in_hours_reg.mode_AM_PM.next = next_c;
        field_combo.ir_in_hours_reg.mode_AM_PM.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_in_hours_reg.mode_AM_PM.value <= 1'h0;
        end else if(field_combo.ir_in_hours_reg.mode_AM_PM.load_next) begin
            field_storage.ir_in_hours_reg.mode_AM_PM.value <= field_combo.ir_in_hours_reg.mode_AM_PM.next;
        end
    end
    assign hwif_out.ir_in_hours_reg.mode_AM_PM.value = field_storage.ir_in_hours_reg.mode_AM_PM.value;
    // Field: rtc_am.ir_in_day_of_week_reg.day_of_week
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_in_day_of_week_reg.day_of_week.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.ir_in_day_of_week_reg.day_of_week.next;
        load_next_c = '1;
        field_combo.ir_in_day_of_week_reg.day_of_week.next = next_c;
        field_combo.ir_in_day_of_week_reg.day_of_week.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_in_day_of_week_reg.day_of_week.value <= 3'h1;
        end else if(field_combo.ir_in_day_of_week_reg.day_of_week.load_next) begin
            field_storage.ir_in_day_of_week_reg.day_of_week.value <= field_combo.ir_in_day_of_week_reg.day_of_week.next;
        end
    end
    assign hwif_out.ir_in_day_of_week_reg.day_of_week.value = field_storage.ir_in_day_of_week_reg.day_of_week.value;
    // Field: rtc_am.ir_in_day_of_month_reg.day_of_month
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_in_day_of_month_reg.day_of_month.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.ir_in_day_of_month_reg.day_of_month.next;
        load_next_c = '1;
        field_combo.ir_in_day_of_month_reg.day_of_month.next = next_c;
        field_combo.ir_in_day_of_month_reg.day_of_month.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_in_day_of_month_reg.day_of_month.value <= 5'h1;
        end else if(field_combo.ir_in_day_of_month_reg.day_of_month.load_next) begin
            field_storage.ir_in_day_of_month_reg.day_of_month.value <= field_combo.ir_in_day_of_month_reg.day_of_month.next;
        end
    end
    assign hwif_out.ir_in_day_of_month_reg.day_of_month.value = field_storage.ir_in_day_of_month_reg.day_of_month.value;
    // Field: rtc_am.ir_in_month_reg.month
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_in_month_reg.month.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.ir_in_month_reg.month.next;
        load_next_c = '1;
        field_combo.ir_in_month_reg.month.next = next_c;
        field_combo.ir_in_month_reg.month.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_in_month_reg.month.value <= 4'h1;
        end else if(field_combo.ir_in_month_reg.month.load_next) begin
            field_storage.ir_in_month_reg.month.value <= field_combo.ir_in_month_reg.month.next;
        end
    end
    assign hwif_out.ir_in_month_reg.month.value = field_storage.ir_in_month_reg.month.value;
    // Field: rtc_am.ir_in_year_reg.year
    always_comb begin
        automatic logic [11:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_in_year_reg.year.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.ir_in_year_reg.year.next;
        load_next_c = '1;
        field_combo.ir_in_year_reg.year.next = next_c;
        field_combo.ir_in_year_reg.year.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_in_year_reg.year.value <= 12'h7d0;
        end else if(field_combo.ir_in_year_reg.year.load_next) begin
            field_storage.ir_in_year_reg.year.value <= field_combo.ir_in_year_reg.year.next;
        end
    end
    assign hwif_out.ir_in_year_reg.year.value = field_storage.ir_in_year_reg.year.value;
    // Field: rtc_am.ir_out_sec_reg.sec
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_out_sec_reg.sec.value;
        load_next_c = '0;
        if(decoded_reg_strb.ir_out_sec_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ir_out_sec_reg.sec.value & ~decoded_wr_biten[5:0]) | (decoded_wr_data[5:0] & decoded_wr_biten[5:0]);
            load_next_c = '1;
        end
        field_combo.ir_out_sec_reg.sec.next = next_c;
        field_combo.ir_out_sec_reg.sec.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_out_sec_reg.sec.value <= 6'h0;
        end else if(field_combo.ir_out_sec_reg.sec.load_next) begin
            field_storage.ir_out_sec_reg.sec.value <= field_combo.ir_out_sec_reg.sec.next;
        end
    end
    assign hwif_out.ir_out_sec_reg.sec.value = field_storage.ir_out_sec_reg.sec.value;
    // Field: rtc_am.ir_out_min_reg.min
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_out_min_reg.min.value;
        load_next_c = '0;
        if(decoded_reg_strb.ir_out_min_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ir_out_min_reg.min.value & ~decoded_wr_biten[5:0]) | (decoded_wr_data[5:0] & decoded_wr_biten[5:0]);
            load_next_c = '1;
        end
        field_combo.ir_out_min_reg.min.next = next_c;
        field_combo.ir_out_min_reg.min.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_out_min_reg.min.value <= 6'h0;
        end else if(field_combo.ir_out_min_reg.min.load_next) begin
            field_storage.ir_out_min_reg.min.value <= field_combo.ir_out_min_reg.min.next;
        end
    end
    assign hwif_out.ir_out_min_reg.min.value = field_storage.ir_out_min_reg.min.value;
    // Field: rtc_am.ir_out_hours_reg.hour
    always_comb begin
        automatic logic [5:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_out_hours_reg.hour.value;
        load_next_c = '0;
        if(decoded_reg_strb.ir_out_hours_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ir_out_hours_reg.hour.value & ~decoded_wr_biten[5:0]) | (decoded_wr_data[5:0] & decoded_wr_biten[5:0]);
            load_next_c = '1;
        end
        field_combo.ir_out_hours_reg.hour.next = next_c;
        field_combo.ir_out_hours_reg.hour.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_out_hours_reg.hour.value <= 6'h0;
        end else if(field_combo.ir_out_hours_reg.hour.load_next) begin
            field_storage.ir_out_hours_reg.hour.value <= field_combo.ir_out_hours_reg.hour.next;
        end
    end
    assign hwif_out.ir_out_hours_reg.hour.value = field_storage.ir_out_hours_reg.hour.value;
    // Field: rtc_am.ir_out_hours_reg.mode_12_24
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_out_hours_reg.mode_12_24.value;
        load_next_c = '0;
        if(decoded_reg_strb.ir_out_hours_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ir_out_hours_reg.mode_12_24.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.ir_out_hours_reg.mode_12_24.next = next_c;
        field_combo.ir_out_hours_reg.mode_12_24.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_out_hours_reg.mode_12_24.value <= 1'h0;
        end else if(field_combo.ir_out_hours_reg.mode_12_24.load_next) begin
            field_storage.ir_out_hours_reg.mode_12_24.value <= field_combo.ir_out_hours_reg.mode_12_24.next;
        end
    end
    assign hwif_out.ir_out_hours_reg.mode_12_24.value = field_storage.ir_out_hours_reg.mode_12_24.value;
    // Field: rtc_am.ir_out_hours_reg.mode_AM_PM
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_out_hours_reg.mode_AM_PM.value;
        load_next_c = '0;
        if(decoded_reg_strb.ir_out_hours_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ir_out_hours_reg.mode_AM_PM.value & ~decoded_wr_biten[7:7]) | (decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end
        field_combo.ir_out_hours_reg.mode_AM_PM.next = next_c;
        field_combo.ir_out_hours_reg.mode_AM_PM.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_out_hours_reg.mode_AM_PM.value <= 1'h0;
        end else if(field_combo.ir_out_hours_reg.mode_AM_PM.load_next) begin
            field_storage.ir_out_hours_reg.mode_AM_PM.value <= field_combo.ir_out_hours_reg.mode_AM_PM.next;
        end
    end
    assign hwif_out.ir_out_hours_reg.mode_AM_PM.value = field_storage.ir_out_hours_reg.mode_AM_PM.value;
    // Field: rtc_am.ir_out_day_of_week_reg.day_of_week
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_out_day_of_week_reg.day_of_week.value;
        load_next_c = '0;
        if(decoded_reg_strb.ir_out_day_of_week_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ir_out_day_of_week_reg.day_of_week.value & ~decoded_wr_biten[2:0]) | (decoded_wr_data[2:0] & decoded_wr_biten[2:0]);
            load_next_c = '1;
        end
        field_combo.ir_out_day_of_week_reg.day_of_week.next = next_c;
        field_combo.ir_out_day_of_week_reg.day_of_week.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_out_day_of_week_reg.day_of_week.value <= 3'h1;
        end else if(field_combo.ir_out_day_of_week_reg.day_of_week.load_next) begin
            field_storage.ir_out_day_of_week_reg.day_of_week.value <= field_combo.ir_out_day_of_week_reg.day_of_week.next;
        end
    end
    assign hwif_out.ir_out_day_of_week_reg.day_of_week.value = field_storage.ir_out_day_of_week_reg.day_of_week.value;
    // Field: rtc_am.ir_out_day_of_month_reg.day_of_month
    always_comb begin
        automatic logic [4:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_out_day_of_month_reg.day_of_month.value;
        load_next_c = '0;
        if(decoded_reg_strb.ir_out_day_of_month_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ir_out_day_of_month_reg.day_of_month.value & ~decoded_wr_biten[4:0]) | (decoded_wr_data[4:0] & decoded_wr_biten[4:0]);
            load_next_c = '1;
        end
        field_combo.ir_out_day_of_month_reg.day_of_month.next = next_c;
        field_combo.ir_out_day_of_month_reg.day_of_month.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_out_day_of_month_reg.day_of_month.value <= 5'h1;
        end else if(field_combo.ir_out_day_of_month_reg.day_of_month.load_next) begin
            field_storage.ir_out_day_of_month_reg.day_of_month.value <= field_combo.ir_out_day_of_month_reg.day_of_month.next;
        end
    end
    assign hwif_out.ir_out_day_of_month_reg.day_of_month.value = field_storage.ir_out_day_of_month_reg.day_of_month.value;
    // Field: rtc_am.ir_out_month_reg.month
    always_comb begin
        automatic logic [3:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_out_month_reg.month.value;
        load_next_c = '0;
        if(decoded_reg_strb.ir_out_month_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ir_out_month_reg.month.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo.ir_out_month_reg.month.next = next_c;
        field_combo.ir_out_month_reg.month.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_out_month_reg.month.value <= 4'h1;
        end else if(field_combo.ir_out_month_reg.month.load_next) begin
            field_storage.ir_out_month_reg.month.value <= field_combo.ir_out_month_reg.month.next;
        end
    end
    assign hwif_out.ir_out_month_reg.month.value = field_storage.ir_out_month_reg.month.value;
    // Field: rtc_am.ir_out_year_reg.year
    always_comb begin
        automatic logic [11:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.ir_out_year_reg.year.value;
        load_next_c = '0;
        if(decoded_reg_strb.ir_out_year_reg && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.ir_out_year_reg.year.value & ~decoded_wr_biten[11:0]) | (decoded_wr_data[11:0] & decoded_wr_biten[11:0]);
            load_next_c = '1;
        end
        field_combo.ir_out_year_reg.year.next = next_c;
        field_combo.ir_out_year_reg.year.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.ir_out_year_reg.year.value <= 12'h7d0;
        end else if(field_combo.ir_out_year_reg.year.load_next) begin
            field_storage.ir_out_year_reg.year.value <= field_combo.ir_out_year_reg.year.next;
        end
    end
    assign hwif_out.ir_out_year_reg.year.value = field_storage.ir_out_year_reg.year.value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = undecoded_addr_strb;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[31];
    assign readback_array[0][0:0] = (decoded_reg_strb.enable_reg && !decoded_req_is_wr) ? field_storage.enable_reg.enable.value : '0;
    assign readback_array[0][31:1] = '0;
    assign readback_array[1][0:0] = (decoded_reg_strb.config_reg && !decoded_req_is_wr) ? field_storage.config_reg.gen_en.value : '0;
    assign readback_array[1][1:1] = (decoded_reg_strb.config_reg && !decoded_req_is_wr) ? field_storage.config_reg.sel_clk.value : '0;
    assign readback_array[1][2:2] = (decoded_reg_strb.config_reg && !decoded_req_is_wr) ? field_storage.config_reg.sel_mode.value : '0;
    assign readback_array[1][3:3] = (decoded_reg_strb.config_reg && !decoded_req_is_wr) ? field_storage.config_reg.en_preset.value : '0;
    assign readback_array[1][31:4] = '0;
    assign readback_array[2][5:0] = (decoded_reg_strb.cur_sec_reg && !decoded_req_is_wr) ? field_storage.cur_sec_reg.sec.value : '0;
    assign readback_array[2][31:6] = '0;
    assign readback_array[3][5:0] = (decoded_reg_strb.cur_min_reg && !decoded_req_is_wr) ? field_storage.cur_min_reg.min.value : '0;
    assign readback_array[3][31:6] = '0;
    assign readback_array[4][4:0] = (decoded_reg_strb.cur_hours_reg && !decoded_req_is_wr) ? field_storage.cur_hours_reg.hour.value : '0;
    assign readback_array[4][5:5] = (decoded_reg_strb.cur_hours_reg && !decoded_req_is_wr) ? field_storage.cur_hours_reg.mode_12_24.value : '0;
    assign readback_array[4][6:6] = (decoded_reg_strb.cur_hours_reg && !decoded_req_is_wr) ? field_storage.cur_hours_reg.mode_AM_PM.value : '0;
    assign readback_array[4][31:7] = '0;
    assign readback_array[5][2:0] = (decoded_reg_strb.cur_day_of_week_reg && !decoded_req_is_wr) ? field_storage.cur_day_of_week_reg.day_of_week.value : '0;
    assign readback_array[5][31:3] = '0;
    assign readback_array[6][4:0] = (decoded_reg_strb.cur_day_of_month_reg && !decoded_req_is_wr) ? field_storage.cur_day_of_month_reg.day_of_month.value : '0;
    assign readback_array[6][31:5] = '0;
    assign readback_array[7][3:0] = (decoded_reg_strb.cur_month_reg && !decoded_req_is_wr) ? field_storage.cur_month_reg.month.value : '0;
    assign readback_array[7][31:4] = '0;
    assign readback_array[8][11:0] = (decoded_reg_strb.cur_year_reg && !decoded_req_is_wr) ? field_storage.cur_year_reg.year.value : '0;
    assign readback_array[8][31:12] = '0;
    assign readback_array[9][31:0] = (decoded_reg_strb.const_reg && !decoded_req_is_wr) ? field_storage.const_reg.const_.value : '0;
    assign readback_array[10][5:0] = (decoded_reg_strb.init_sec_reg && !decoded_req_is_wr) ? field_storage.init_sec_reg.sec.value : '0;
    assign readback_array[10][31:6] = '0;
    assign readback_array[11][5:0] = (decoded_reg_strb.init_min_reg && !decoded_req_is_wr) ? field_storage.init_min_reg.min.value : '0;
    assign readback_array[11][31:6] = '0;
    assign readback_array[12][5:0] = (decoded_reg_strb.init_hours_reg && !decoded_req_is_wr) ? field_storage.init_hours_reg.hour.value : '0;
    assign readback_array[12][6:6] = (decoded_reg_strb.init_hours_reg && !decoded_req_is_wr) ? field_storage.init_hours_reg.mode_12_24.value : '0;
    assign readback_array[12][7:7] = (decoded_reg_strb.init_hours_reg && !decoded_req_is_wr) ? field_storage.init_hours_reg.mode_AM_PM.value : '0;
    assign readback_array[12][31:8] = '0;
    assign readback_array[13][2:0] = (decoded_reg_strb.init_day_of_week_reg && !decoded_req_is_wr) ? field_storage.init_day_of_week_reg.day_of_week.value : '0;
    assign readback_array[13][31:3] = '0;
    assign readback_array[14][4:0] = (decoded_reg_strb.init_day_of_month_reg && !decoded_req_is_wr) ? field_storage.init_day_of_month_reg.day_of_month.value : '0;
    assign readback_array[14][31:5] = '0;
    assign readback_array[15][3:0] = (decoded_reg_strb.init_month_reg && !decoded_req_is_wr) ? field_storage.init_month_reg.month.value : '0;
    assign readback_array[15][31:4] = '0;
    assign readback_array[16][11:0] = (decoded_reg_strb.init_year_reg && !decoded_req_is_wr) ? field_storage.init_year_reg.year.value : '0;
    assign readback_array[16][31:12] = '0;
    assign readback_array[17][5:0] = (decoded_reg_strb.ir_in_sec_reg && !decoded_req_is_wr) ? field_storage.ir_in_sec_reg.sec.value : '0;
    assign readback_array[17][31:6] = '0;
    assign readback_array[18][5:0] = (decoded_reg_strb.ir_in_min_reg && !decoded_req_is_wr) ? field_storage.ir_in_min_reg.min.value : '0;
    assign readback_array[18][31:6] = '0;
    assign readback_array[19][5:0] = (decoded_reg_strb.ir_in_hours_reg && !decoded_req_is_wr) ? field_storage.ir_in_hours_reg.hour.value : '0;
    assign readback_array[19][6:6] = (decoded_reg_strb.ir_in_hours_reg && !decoded_req_is_wr) ? field_storage.ir_in_hours_reg.mode_12_24.value : '0;
    assign readback_array[19][7:7] = (decoded_reg_strb.ir_in_hours_reg && !decoded_req_is_wr) ? field_storage.ir_in_hours_reg.mode_AM_PM.value : '0;
    assign readback_array[19][31:8] = '0;
    assign readback_array[20][2:0] = (decoded_reg_strb.ir_in_day_of_week_reg && !decoded_req_is_wr) ? field_storage.ir_in_day_of_week_reg.day_of_week.value : '0;
    assign readback_array[20][31:3] = '0;
    assign readback_array[21][4:0] = (decoded_reg_strb.ir_in_day_of_month_reg && !decoded_req_is_wr) ? field_storage.ir_in_day_of_month_reg.day_of_month.value : '0;
    assign readback_array[21][31:5] = '0;
    assign readback_array[22][3:0] = (decoded_reg_strb.ir_in_month_reg && !decoded_req_is_wr) ? field_storage.ir_in_month_reg.month.value : '0;
    assign readback_array[22][31:4] = '0;
    assign readback_array[23][11:0] = (decoded_reg_strb.ir_in_year_reg && !decoded_req_is_wr) ? field_storage.ir_in_year_reg.year.value : '0;
    assign readback_array[23][31:12] = '0;
    assign readback_array[24][5:0] = (decoded_reg_strb.ir_out_sec_reg && !decoded_req_is_wr) ? field_storage.ir_out_sec_reg.sec.value : '0;
    assign readback_array[24][31:6] = '0;
    assign readback_array[25][5:0] = (decoded_reg_strb.ir_out_min_reg && !decoded_req_is_wr) ? field_storage.ir_out_min_reg.min.value : '0;
    assign readback_array[25][31:6] = '0;
    assign readback_array[26][5:0] = (decoded_reg_strb.ir_out_hours_reg && !decoded_req_is_wr) ? field_storage.ir_out_hours_reg.hour.value : '0;
    assign readback_array[26][6:6] = (decoded_reg_strb.ir_out_hours_reg && !decoded_req_is_wr) ? field_storage.ir_out_hours_reg.mode_12_24.value : '0;
    assign readback_array[26][7:7] = (decoded_reg_strb.ir_out_hours_reg && !decoded_req_is_wr) ? field_storage.ir_out_hours_reg.mode_AM_PM.value : '0;
    assign readback_array[26][31:8] = '0;
    assign readback_array[27][2:0] = (decoded_reg_strb.ir_out_day_of_week_reg && !decoded_req_is_wr) ? field_storage.ir_out_day_of_week_reg.day_of_week.value : '0;
    assign readback_array[27][31:3] = '0;
    assign readback_array[28][4:0] = (decoded_reg_strb.ir_out_day_of_month_reg && !decoded_req_is_wr) ? field_storage.ir_out_day_of_month_reg.day_of_month.value : '0;
    assign readback_array[28][31:5] = '0;
    assign readback_array[29][3:0] = (decoded_reg_strb.ir_out_month_reg && !decoded_req_is_wr) ? field_storage.ir_out_month_reg.month.value : '0;
    assign readback_array[29][31:4] = '0;
    assign readback_array[30][11:0] = (decoded_reg_strb.ir_out_year_reg && !decoded_req_is_wr) ? field_storage.ir_out_year_reg.year.value : '0;
    assign readback_array[30][31:12] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = undecoded_addr_strb;
        readback_data_var = '0;
        for(int i=0; i<31; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule